#version 460


#include "bidirectional_path_tracer.glsl"

#define MAX_PATH_LENGTH 20
#define VISION_HP_INDEX 0
#define LIGHT_HP_INDEX 1

HitPoint hitPoints[2][MAX_PATH_LENGTH];


uint tracePath(inout RNG rng, RaySendInfo rayInfo, uint startDepth, uint maxDepth, bool isLightRay) {
	uint hp_index = isLightRay ? LIGHT_HP_INDEX : VISION_HP_INDEX;
	vec3 color = vec3(1.0);
	uint pathDepth = startDepth;

	for (uint i = startDepth; i < maxDepth; ++i) {
		traceRay(rayInfo);

		if (!rayPayload.hit) {
			break;
		}

		pathDepth = i + 1;
		uint traceValue = handleHit(rayInfo, rng);

		if (traceValue == DIFFUSE_VALUE) {
			vec3 direction = isLightRay ? rayInfo.prevDirection : rayInfo.direction;
			color *= rayPayload.color * dot(direction, rayPayload.normal);
			hitPoints[hp_index][i].diffuse = true;
		} else {
			hitPoints[hp_index][i].diffuse = false;
		}

		hitPoints[hp_index][i].pos = rayPayload.pos;
		hitPoints[hp_index][i].normal = rayPayload.normal;
		hitPoints[hp_index][i].cumulativeColor = color;
		hitPoints[hp_index][i].lightHit = false;

		if (rayPayload.lightSource) {
			if (dot(rayInfo.prevDirection, rayPayload.normal) <= 0.0) {
				hitPoints[hp_index][i].lightHit = true;
				break;
			}
		}
	}

	return pathDepth;
}

void main() {
	if (gl_LaunchIDEXT.z > 0) return;
	RNG rng = initRNG(gl_LaunchIDEXT);

	RaySendInfo startVisionRayInfo = getVisionRay(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy);

	vec3 finalColor = vec3(0.0);

	for (uint visionRayIndex = 0; visionRayIndex < renderSettings.raysPerPixelCount; ++visionRayIndex) {
		uint visionPathDepth = tracePath(rng, startVisionRayInfo, 0, renderSettings.visionJumpCount, false);

		if (visionPathDepth == 0) continue;

		if (hitPoints[VISION_HP_INDEX][visionPathDepth - 1].lightHit) {
			finalColor += hitPoints[VISION_HP_INDEX][visionPathDepth - 1].cumulativeColor;
			continue;
		}

		LightSourcePoint lsp = getRandomLightSourcePoint(rng);
		vec3 direction = randomNormalDirection(rng, lsp.normal);
		RaySendInfo startLightRayInfo = lightSourcePointToRayInfo(lsp, direction);

		hitPoints[LIGHT_HP_INDEX][0].pos = startLightRayInfo.origin;
		hitPoints[LIGHT_HP_INDEX][0].normal = lsp.normal;
		hitPoints[LIGHT_HP_INDEX][0].cumulativeColor = startLightRayInfo.startColor;
		hitPoints[LIGHT_HP_INDEX][0].diffuse = true;
		uint lightPathDepth = tracePath(rng, startLightRayInfo, 1, renderSettings.lightJumpCount, true);

		bool done = false;
		vec3 color = vec3(0.0);

		for (uint vi = 0; vi < visionPathDepth; ++vi) {
			for (uint li = 0; li < lightPathDepth; ++li) {
				vec3 startPos = hitPoints[VISION_HP_INDEX][vi].pos + RAY_NORMAL_OFFSET * hitPoints[VISION_HP_INDEX][vi].normal;
				vec3 endPos = hitPoints[LIGHT_HP_INDEX][li].pos + RAY_NORMAL_OFFSET * hitPoints[LIGHT_HP_INDEX][li].normal;

				if (!isOccluded(startPos, endPos)) {
					vec3 direction = normalize(endPos - startPos);
					vec3 normal = hitPoints[VISION_HP_INDEX][vi].normal;

					vec3 visionColor = hitPoints[VISION_HP_INDEX][vi].cumulativeColor;
					vec3 lightColor = hitPoints[LIGHT_HP_INDEX][li].cumulativeColor;
					color += visionColor * lightColor * dot(direction, normal);
					done = true;
				}
			}
		}

		if (done) finalColor += color * (1.0 / float(visionPathDepth * lightPathDepth));
	}
	
	finalColor *= (2*PI) * (1.0 / float(renderSettings.raysPerPixelCount));

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 0.0));
}
