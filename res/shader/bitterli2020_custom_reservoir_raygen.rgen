#version 460


#include "bitterli2020_custom.glsl"


void fillReservoir(inout RNG rng, inout Reservoir r, vec3 probePos) {
	for (uint i = 0; i < renderSettings.candidateCount; ++i) {
		Sample s;
		s.lsp = getRandomLightSourcePoint(rng);
		vec3 direction = probePos - s.lsp.pos;
		float slength = square_length(direction);
		// if (slength > 3.0) continue;
		s.weight = s.lsp.lightStrength * (1.0 / slength) * dot(normalize(direction), s.lsp.normal);
		if (s.weight < 0.0) continue;

		updateReservoir(r, rng, s, s.weight);
	}

	r.W = r.w_sum / (r.y.weight * float(r.M));
}


void main() {
	uint probeDataIndex = gl_LaunchIDEXT.x * renderSettings.sampleCount + gl_LaunchIDEXT.y;
	Reservoir r_tmp = probeReservoirs.r[probeDataIndex];
	RNG rng = initRNG(gl_LaunchIDEXT + uvec3(r_tmp.w_sum));

	uint i = gl_LaunchIDEXT.x;

	uint x = (i % renderSettings.probeCount.x);
	i = (i - x) / renderSettings.probeCount.x;

	uint y = (i % renderSettings.probeCount.y);
	i = (i - y) / renderSettings.probeCount.y;

	uint z = (i % renderSettings.probeCount.z);
	
	vec3 probePos = vec3(x, y, z) * renderSettings.betweenProbeDistance + renderSettings.probeStartCorner;

	Reservoir r;
	fillReservoir(rng, r, probePos);
	probeReservoirs.r[probeDataIndex] = r;
}
