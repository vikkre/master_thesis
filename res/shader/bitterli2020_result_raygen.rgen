#version 460


#include "bitterli2020.glsl"


void main() {
	RNG rng = initRNG(gl_LaunchIDEXT);

	BitterliRayPayload p = rayPayloads.r[getPayloadIndex(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy)];

	if (!p.hit) {
		imageStore(finalImage, ivec2(gl_LaunchIDEXT.xy), vec4(0.0));
		return;
	}

	if (p.lightSource) {
		imageStore(finalImage, ivec2(gl_LaunchIDEXT.xy), vec4(p.color, 0.0));
		return;
	}


	vec3 illumination = vec3(0.0);

	for (uint sampleIndex = 0; sampleIndex < renderSettings.sampleCount; sampleIndex++) {
		Reservoir r = spatialReservoirs.r[getReservoirIndex(uvec2(gl_LaunchIDEXT), gl_LaunchSizeEXT.xy, sampleIndex)];

		for (uint d = 0; d < DIRECTION_COUNT; ++d) {
			ivec2 p = ivec2(gl_LaunchIDEXT) + DIRECTIONS[d];
			if (0 <= p.x && p.x < gl_LaunchSizeEXT.x && 0 <= p.y && p.y < gl_LaunchSizeEXT.y) {
				Reservoir sr = spatialReservoirs.r[getReservoirIndex(uvec2(p), gl_LaunchSizeEXT.xy, sampleIndex)];
				r = combineReservoirs(rng, r, sr);
			}
		}
		
		illumination += shadowTrace(r.y.lsp, p.pos, p.normal);
	}
	imageStore(finalImage, ivec2(gl_LaunchIDEXT.xy), vec4(p.color * illumination, 0.0));
}
