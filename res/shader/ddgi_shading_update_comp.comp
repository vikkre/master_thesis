#version 460

#define COMPUTE_SHADER
#include "ddgi.glsl"


#define ENERGY_CONSERVAION 0.95
#define EPSILON 1e-6


uint getProbeID(ivec2 texelCoord) {
	uint probeSampleSideLengthWBorder = renderSettings.probeSampleSideLength + 2;
	uint singleExtend = 2 * renderSettings.singleDirectionProbeCount + 1;
	uint probeCountSideX = singleExtend * singleExtend;
	return uint(texelCoord.x / probeSampleSideLengthWBorder) + probeCountSideX * uint(texelCoord.y / probeSampleSideLengthWBorder);
}

vec2 normalizedOctCoord(ivec2 texelCoord) {
	uint probeSampleSideLengthWBorder = renderSettings.probeSampleSideLength + 2;

	ivec2 octFragCoord = ivec2((texelCoord.x - 2) % probeSampleSideLengthWBorder, (texelCoord.y - 2) % probeSampleSideLengthWBorder);

	return (vec2(octFragCoord) + vec2(0.5)) * (2.0 / float(renderSettings.probeSampleSideLength)) - vec2(1.0);
}


void main() {
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	uint probeID = getProbeID(pos);

	vec3 irradianceResult = vec3(0.0);
	float totalIrradianceWeight = 0.0;
	vec2 dephtResult = vec2(0.0);
	float totalDepthWeight = 0.0;

	vec3 texelDirection = octDecode(normalizedOctCoord(pos));

	for (uint i = 0; i < renderSettings.perProbeRayCount; i++) {
		uint surfelIndex = probeID * renderSettings.perProbeRayCount + i;

		vec3 rayDirection = surfels.s[surfelIndex].rayDirection;
		vec3 hitRadiance = surfels.s[surfelIndex].hitRadiance;
		float hitDistance = surfels.s[surfelIndex].hitDistance;
		bool hit = surfels.s[surfelIndex].hit;

		float rayProbeDistance = renderSettings.maxProbeRayDistance;
		if (hit) rayProbeDistance = min(rayProbeDistance, hitDistance);

		float irradianceWeight = max(0.0, dot(texelDirection, rayDirection));
		float depthWeight = pow(irradianceWeight, renderSettings.depthSharpness);

		if (irradianceWeight >= EPSILON) {
			irradianceResult += irradianceWeight * hitRadiance;
			totalIrradianceWeight += irradianceWeight;
		}
		
		if (depthWeight >= EPSILON) {
			dephtResult += depthWeight * vec2(rayProbeDistance, rayProbeDistance*rayProbeDistance);
			totalDepthWeight += depthWeight;
		}
	}

	imageStore(irradianceBuffer, pos, vec4(irradianceResult / totalIrradianceWeight, 0.0));
	imageStore(depthBuffer, pos, vec4(dephtResult / totalDepthWeight, 0.0, 0.0));
}
