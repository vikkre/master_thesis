#version 460

#extension GL_EXT_scalar_block_layout: enable

layout(set = 0, binding = 0, rgba8) uniform image2D rawImage;
layout(set = 0, binding = 1, rgba8) uniform image2D resultImage;
layout(set = 0, binding = 2, scalar) uniform Settings {
	uint kernelSize;
} settings;


#define s2(a, b)                temp = a; a = min(a, b); b = max(temp, b);
#define mn3(a, b, c)            s2(a, b); s2(a, c);
#define mx3(a, b, c)            s2(b, c); s2(a, c);

#define mnmx3(a, b, c)          mx3(a, b, c); s2(a, b);                                   // 3 exchanges
#define mnmx4(a, b, c, d)       s2(a, b); s2(c, d); s2(a, c); s2(b, d);                   // 4 exchanges
#define mnmx5(a, b, c, d, e)    s2(a, b); s2(c, d); mn3(a, c, e); mx3(b, d, e);           // 6 exchanges
#define mnmx6(a, b, c, d, e, f) s2(a, d); s2(b, e); s2(c, f); mn3(a, b, c); mx3(d, e, f); // 7 exchanges


void main() {
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(rawImage);


	vec4 v[9];
	for (int dX = -1; dX <= 1; ++dX) {
		for (int dY = -1; dY <= 1; ++dY) {
			ivec2 p = pos + ivec2(dX, dY);

			if (0 <= p.x && p.x < size.x && 0 <= p.y && p.y < size.y) {
				v[(dX + 1) * 3 + (dY + 1)] = imageLoad(rawImage, p);
			}
		}
	}

	vec4 temp;
	mnmx6(v[0], v[1], v[2], v[3], v[4], v[5]);
	mnmx5(v[1], v[2], v[3], v[4], v[6]);
	mnmx4(v[2], v[3], v[4], v[7]);
	mnmx3(v[3], v[4], v[8]);
	imageStore(resultImage, pos, v[4]);
}
