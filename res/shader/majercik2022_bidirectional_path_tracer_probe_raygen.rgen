#version 460


#include "majercik2022_bidirectional_path_tracer.glsl"


vec3 bidirectional_path_tracer(inout RNG rng, BitterliRayPayload payload, LightSourcePoint lsp) {
	RaySendInfo startVisionRayInfo;
	startVisionRayInfo.origin = payload.pos;
	startVisionRayInfo.direction = randomNormalDirection(rng, payload.normal);
	startVisionRayInfo.backfaceCulling = false;
	startVisionRayInfo.startColor = payload.color;

	hitPoints[VISION_HP_INDEX][0].pos = payload.pos;
	hitPoints[VISION_HP_INDEX][0].normal = payload.normal;
	hitPoints[VISION_HP_INDEX][0].cumulativeColor = payload.color;
	hitPoints[VISION_HP_INDEX][0].diffuse = true;
	uint visionPathDepth = tracePath(rng, startVisionRayInfo, 1, renderSettings.probeVisionJumpCount, false);

	if (visionPathDepth == 0) return vec3(0.0);

	if (hitPoints[VISION_HP_INDEX][visionPathDepth - 1].lightHit) {
		return hitPoints[VISION_HP_INDEX][visionPathDepth - 1].cumulativeColor;
	}

	vec3 direction = randomNormalDirection(rng, lsp.normal);
	RaySendInfo startLightRayInfo = lightSourcePointToRayInfo(lsp, direction);

	hitPoints[LIGHT_HP_INDEX][0].pos = startLightRayInfo.origin;
	hitPoints[LIGHT_HP_INDEX][0].normal = lsp.normal;
	hitPoints[LIGHT_HP_INDEX][0].cumulativeColor = startLightRayInfo.startColor;
	hitPoints[LIGHT_HP_INDEX][0].diffuse = true;
	uint lightPathDepth = tracePath(rng, startLightRayInfo, 1, renderSettings.probeLightJumpCount, true);

	bool done = false;
	uint count = 0;
	vec3 color = vec3(0.0);

	for (uint vi = 0; vi < visionPathDepth; ++vi) {
		for (uint li = 0; li < lightPathDepth; ++li) {
			if (vi + li > renderSettings.probeMaxDepth) continue;
			++count;

			vec3 startPos = hitPoints[VISION_HP_INDEX][vi].pos + RAY_NORMAL_OFFSET * hitPoints[VISION_HP_INDEX][vi].normal;
			vec3 endPos = hitPoints[LIGHT_HP_INDEX][li].pos + RAY_NORMAL_OFFSET * hitPoints[LIGHT_HP_INDEX][li].normal;

			// vec3 startPos = hitPoints[VISION_HP_INDEX][vi].pos;
			// vec3 endPos = hitPoints[LIGHT_HP_INDEX][li].pos;

			// isOccluded(startPos, endPos);
			if (!isOccluded(startPos, endPos)) {
				vec3 direction = normalize(endPos - startPos);
				vec3 normal = hitPoints[VISION_HP_INDEX][vi].normal;

				vec3 visionColor = hitPoints[VISION_HP_INDEX][vi].cumulativeColor;
				vec3 lightColor = hitPoints[LIGHT_HP_INDEX][li].cumulativeColor;

				color += visionColor * lightColor * dot(direction, normal);
				done = true;
			}
		}
	}

	if (done) color *= (1.0 / float(renderSettings.probeMaxDepth));
	return color;
}


void main() {
	RNG rng = initRNG(gl_LaunchIDEXT);

	uint surfelIndex = gl_LaunchIDEXT.x * renderSettings.perProbeRayCount + gl_LaunchIDEXT.y;

	uint i = gl_LaunchIDEXT.x;

	uint x = (i % renderSettings.probeCount.x);
	i = (i - x) / renderSettings.probeCount.x;

	uint y = (i % renderSettings.probeCount.y);
	i = (i - y) / renderSettings.probeCount.y;

	uint z = (i % renderSettings.probeCount.z);
	
	vec3 probePos = vec3(x, y, z) * renderSettings.betweenProbeDistance + renderSettings.probeStartCorner;

	BitterliRayPayload payload = probeRayPayloads.r[getPayloadIndex(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy)];

	surfels.s[surfelIndex].rayDirection = payload.direction;
	
	if (payload.hit == 1) {
		vec3 modifiedPos = payload.pos + renderSettings.normalBias * payload.normal;

		vec3 directIllumination = vec3(0.0);
		for (uint sampleIndex = 0; sampleIndex < renderSettings.probeSampleCount; sampleIndex++) {
			Reservoir s;
			uint M_sum = 0;
			for (uint d = 0; d < DIRECTION_COUNT; ++d) {
				ivec2 p = ivec2(gl_LaunchIDEXT.xy) + DIRECTIONS[d];
				bool ok = (0 <= p.x) && (p.x < gl_LaunchSizeEXT.x) && (0 <= p.y) && (p.y < gl_LaunchSizeEXT.y);

				if (ok) {
					Reservoir r = probeSpatialReservoirs.r[getReservoirIndex(uvec2(p), gl_LaunchSizeEXT.xy, sampleIndex)];
					if (r.W > 0.0) {
						updateReservoir(s, rng, r.y, r.y.weight * r.W * float(r.M));
						M_sum += r.M;
					}
				}
			}

			s.M = M_sum;
			s.W = (1.0 / s.y.weight) * (1.0 / float(s.M)) * s.w_sum;

			if (s.M > 0) {
				shadowTrace(s.y.lsp, payload.pos, payload.normal);
				directIllumination += bidirectional_path_tracer(rng, payload, s.y.lsp);
			}
		}
		directIllumination *= 2.0 * PI * (1.0 / float(renderSettings.probeSampleCount));

		surfels.s[surfelIndex].hitRadiance = directIllumination;
		surfels.s[surfelIndex].hitDistance = length(probePos - modifiedPos);
		surfels.s[surfelIndex].hit = true;
	} else {
		surfels.s[surfelIndex].hitRadiance = vec3(0.0);
		surfels.s[surfelIndex].hitDistance = 0.0;
		surfels.s[surfelIndex].hit = false;
	}
}
