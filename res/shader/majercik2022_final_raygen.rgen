#version 460


#include "majercik2022.glsl"


uvec3 getBaseGridCoord(vec3 X) {
	return clamp(
		uvec3((X - renderSettings.probeStartCorner) / renderSettings.betweenProbeDistance),
		uvec3(0),
		renderSettings.probeCount - uvec3(1)
	);
}

uint getGridCoordToProbeIndex(uvec3 c) {
	return uint(c.x + c.y * renderSettings.probeCount.x + c.z * renderSettings.probeCount.x * renderSettings.probeCount.y);
}

vec3 getGridCoordToPosition(uvec3 c) {
	return renderSettings.betweenProbeDistance * vec3(c) + renderSettings.probeStartCorner;
}

vec2 textureCoordFromDirection(vec3 dir, uint probeIndex) {
	float probeSideLength = float(renderSettings.probeSampleSideLength);
	ivec2 fullTextureSize = imageSize(irradianceBuffer);

	vec2 normalizedOctCoord = octEncode(normalize(dir));
	vec2 normalizedOctCoordZeroOne = (normalizedOctCoord + vec2(1.0)) * 0.5;
	vec2 octCoordNormalizedToTextureDimensions = (normalizedOctCoordZeroOne * probeSideLength) / vec2(fullTextureSize);

	float probeWithBorderSide = probeSideLength + 2.0;
	int probesPerRow = (fullTextureSize.x - 2) / int(probeWithBorderSide);
	vec2 probeTopLeftPosition = vec2(
		float(probeIndex % probesPerRow) * probeWithBorderSide,
		float(probeIndex / probesPerRow) * probeWithBorderSide
	) + vec2(2.0);

	vec2 normalizedProbeTopLeftPosition = probeTopLeftPosition / vec2(fullTextureSize);

	return vec2(normalizedProbeTopLeftPosition + octCoordNormalizedToTextureDimensions);
}

vec3 getIrradiance(vec3 originPos, vec3 viewDirection, vec3 hitPos, vec3 hitNormal) {
	vec3 originDirection = -viewDirection;
	uvec3 baseGridCoord = getBaseGridCoord(hitPos);
	vec3 baseProbePos = getGridCoordToPosition(baseGridCoord);
	vec3 alpha = clamp(abs(hitPos - baseProbePos) / renderSettings.betweenProbeDistance, vec3(0.0), vec3(1.0));

	vec3 sumIrradiance = vec3(0.0);
	float sumWeight = 0.0;

	for (uint i = 0; i < 8; ++i) {
		uvec3 offset = uvec3(i, i >> 1, i >> 2) & uvec3(1);
		uvec3 probeGridCoord = clamp(baseGridCoord + offset, uvec3(0), renderSettings.probeCount - uvec3(1));
		uint probeIndex = getGridCoordToProbeIndex(probeGridCoord);
		vec3 probePos = getGridCoordToPosition(probeGridCoord);
		vec3 probeToPoint = hitPos - probePos + (hitNormal + 3.0 * originDirection) * renderSettings.normalBias;
		vec3 directionToProbe = normalize(-probeToPoint);

		float weight = (dot(directionToProbe, hitNormal) + 1.0) * 0.5;

		vec3 trilinear = lerp(vec3(1.0) - alpha, alpha, vec3(offset));
		weight *= trilinear.x * trilinear.y * trilinear.z;

		vec2 texCoord = textureCoordFromDirection(-directionToProbe, probeIndex);

		float distToProbe = length(probeToPoint);
		vec2 depthTemp = texture(depthSampler, texCoord).xy;
		float depthMean = depthTemp.x;
		float depthVariance = abs(depthMean * depthMean - depthTemp.y);

		float depthMeanDistToProbe = max(distToProbe - depthMean, 0.0);
		float chebyshevWeight = depthVariance / (depthVariance + depthMeanDistToProbe * depthMeanDistToProbe);
		chebyshevWeight = max(pow(chebyshevWeight, 3), 0.0);
		if (distToProbe <= depthMean) weight *= chebyshevWeight;

		weight = max(0.0001, weight);
		vec3 probeIrradiance = texture(irradianceSampler, texCoord).xyz;

		if (renderSettings.linearBlending == 0) probeIrradiance = sqrt(probeIrradiance);

		sumIrradiance += weight * probeIrradiance;
		sumWeight += weight;
	}

	vec3 netIrradiance = sumIrradiance / sumWeight;
	if (renderSettings.linearBlending == 0) netIrradiance = netIrradiance*netIrradiance;
	netIrradiance *= renderSettings.energyPreservation;

	return 0.5 * PI * netIrradiance;
}

vec3 getDirectIllumination(inout RNG rng, BitterliRayPayload payload) {
	vec3 illumination = vec3(0.0);

	for (uint sampleIndex = 0; sampleIndex < renderSettings.sampleCount; sampleIndex++) {
		Reservoir s;
		uint M_sum = 0;
		for (uint d = 0; d < DIRECTION_COUNT; ++d) {
			ivec2 p = ivec2(gl_LaunchIDEXT.xy) + DIRECTIONS[d];
			bool ok = (0 <= p.x) && (p.x < gl_LaunchSizeEXT.x) && (0 <= p.y) && (p.y < gl_LaunchSizeEXT.y);

			if (ok) {
				Reservoir r = spatialReservoirs.r[getReservoirIndex(uvec2(p), gl_LaunchSizeEXT.xy, sampleIndex)];
				if (r.W > 0.0) {
					updateReservoir(s, rng, r.y, r.y.weight * r.W * float(r.M));
					M_sum += r.M;
				}
			}
		}

		s.M = M_sum;
		s.W = (1.0 / s.y.weight) * (1.0 / float(s.M)) * s.w_sum;
		
		if (s.M > 0) {
			// shadowTrace(s.y.lsp, payload.pos, payload.normal);
			illumination += shadowTrace(s.y.lsp, payload.pos, payload.normal);
		}
	}

	illumination *= 1.0 / float(renderSettings.sampleCount);
	return illumination;
}


void main() {
	RNG rng = initRNG(gl_LaunchIDEXT);

	BitterliRayPayload payload = rayPayloads.r[getPayloadIndex(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy)];

	if (payload.hit == 0) {
		imageStore(finalImage, ivec2(gl_LaunchIDEXT.xy), vec4(0.0));
		return;
	}

	if (payload.lightSource == 1) {
		imageStore(finalImage, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color, 0.0));
		return;
	}

	vec3 modifiedPos = payload.pos + renderSettings.normalBias * payload.normal;
	vec3 directIllumination = payload.color * getDirectIllumination(rng, payload);
	vec3 globalIllumination = payload.color * getIrradiance(payload.pos, payload.direction, modifiedPos, payload.normal);

	imageStore(finalImage, ivec2(gl_LaunchIDEXT.xy), vec4(directIllumination + globalIllumination, 0.0));
}
