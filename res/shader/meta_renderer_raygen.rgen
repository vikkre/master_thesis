#version 460


#include "meta_renderer.glsl"


void main() {
	RaySendInfo rayInfo = getVisionRay(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy);

	for (int i = 0; i < MAX_LIGHT_JUMPS; i++) {
		traceRay(rayInfo);

		if (!rayPayload.hit || renderSettings.lightJump == 0 || i >= MAX_LIGHT_JUMPS - 1) break;

		uint traceValue = handleHit(rayInfo, i);

		if (traceValue == DIFFUSE_VALUE) break;
	}

	vec3 color = vec3(0.0);

	if (rayPayload.hit) {
		if (renderSettings.resultType == 0) {
			color = rayPayload.normal * 0.5 + vec3(0.5);
		} else if (renderSettings.resultType == 1) {
			color = (rayPayload.pos / renderSettings.scaling) * 0.5 + vec3(0.5);
		} else if (renderSettings.resultType == 2) {
			vec3 dir = rayInfo.origin - rayPayload.pos;
			color = vec3(length(dir) / renderSettings.scaling);
		} else if (renderSettings.resultType == 3) {
			color = vec3(
				rayPayload.diffuseThreshold,
				rayPayload.reflectThreshold - rayPayload.diffuseThreshold,
				rayPayload.transparentThreshold - rayPayload.diffuseThreshold - rayPayload.reflectThreshold
			);
		}
	}
	
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
