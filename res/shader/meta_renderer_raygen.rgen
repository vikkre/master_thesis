#version 460


#include "meta_renderer.glsl"


void main() {
	vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec3 origin = (rtSettings.viewInverse * vec4(vec3(0), 1)).xyz;
	vec3 target = (rtSettings.projInverse * vec4(d.x, d.y, 1, 1)).xyz;
	vec3 direction = normalize((rtSettings.viewInverse * vec4(normalize(target), 0)).xyz);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xFF;
	float tmin = 0.001;
	float tmax = 10000.0;

	for (int i = 0; i < MAX_LIGHT_JUMPS; i++) {
		traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin, tmin, direction, tmax, 0);

		if (!rayPayload.hit || renderSettings.lightJump == 0) break;

		float rayHandlingValue = rand(origin + gl_LaunchIDEXT, i, 0);

		if (rayHandlingValue <= rayPayload.diffuseThreshold) {
			break;
		} else if (rayHandlingValue <= rayPayload.reflectThreshold) {
			origin = rayPayload.pos;
			direction = reflect(direction, rayPayload.normal);
		} else if (rayHandlingValue <= rayPayload.transparentThreshold) {
			origin = rayPayload.pos;
			direction = customRefract(direction, rayPayload.normal, rayPayload.refractionIndex);
		}
	}

	vec3 color = vec3(0.0);

	traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin, tmin, direction, tmax, 0);

	if (rayPayload.hit) {
		if (renderSettings.resultType == 0) {
			color = rayPayload.normal * 0.5 + vec3(0.5);
		} else if (renderSettings.resultType == 1) {
			color = (rayPayload.pos / renderSettings.scaling) * 0.5 + vec3(0.5);
		} else if (renderSettings.resultType == 2) {
			vec3 dir = origin - rayPayload.pos;
			color = vec3(length(dir) / renderSettings.scaling);
		} else if (renderSettings.resultType == 3) {
			color = vec3(
				rayPayload.diffuseThreshold,
				rayPayload.reflectThreshold - rayPayload.diffuseThreshold,
				rayPayload.transparentThreshold - rayPayload.diffuseThreshold - rayPayload.reflectThreshold
			);
		}
	}
	
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
