#version 460

#define RAYGEN_SHADER
#include "monte_carlo.glsl"


vec3 getClosestNeighboursColorByCount(vec3 refPoint, vec3 normal) {
	uint filled = 0;
	uint furthest = 0;
	vec3 colors[LIGHT_COLLECTION_DATA_ARRAY_SIZE];
	vec3 points[LIGHT_COLLECTION_DATA_ARRAY_SIZE];
	float distances[LIGHT_COLLECTION_DATA_ARRAY_SIZE];

	int indexStack[LIGHT_COLLECTION_INDEX_STACK_SIZE];
	int currentStackIndex = 0;
	indexStack[0] = 0;

	for (int u = 0; u < count.c && currentStackIndex >= 0; u++) {
		int	currentIndex = indexStack[currentStackIndex];
		currentStackIndex--;
		KDData entry = kdData.d[currentIndex];

		vec3 diff = entry.pos - refPoint;
		diff += dot(normalize(diff), normal) * normal * DISTANCE_NORMAL_MULTIPLICATOR;
		float d = length(diff);
		if (filled < LIGHT_COLLECTION_COUNT) {
			colors[filled] = entry.color;
			points[filled] = entry.pos;
			distances[filled] = d;
			filled++;

			if (filled == LIGHT_COLLECTION_COUNT) {
				uint furthestIndex = 0;
				for (uint i = 1; i < LIGHT_COLLECTION_COUNT; i++) {
					if (distances[i] > distances[furthestIndex]) furthestIndex = i;
				}
				furthest = furthestIndex;
			}
		} else if (d < distances[furthest]) {
			colors[furthest] = entry.color;
			points[furthest] = entry.pos;
			distances[furthest] = d;

			uint furthestIndex = 0;
			for (uint i = 1; i < LIGHT_COLLECTION_COUNT; i++) {
				if (distances[i] > distances[furthestIndex]) furthestIndex = i;
			}
			furthest = furthestIndex;
		}

		bool leftPrimeIndex = refPoint[entry.direction] < entry.pos[entry.direction];
		int primeIndex = leftPrimeIndex ? entry.leftIndex : entry.rightIndex;

		if (filled < LIGHT_COLLECTION_COUNT || abs(refPoint[entry.direction] - entry.pos[entry.direction]) < distances[furthest]) {
			int secondaryIndex = leftPrimeIndex ? entry.rightIndex : entry.leftIndex;

			if (secondaryIndex != -1) {
				if (currentIndex < LIGHT_COLLECTION_INDEX_STACK_SIZE) {
					currentStackIndex++;
					indexStack[currentStackIndex] = secondaryIndex;
				}
			}
		}

		if (primeIndex != -1) {
			if (currentIndex < LIGHT_COLLECTION_INDEX_STACK_SIZE) {
				currentStackIndex++;
				indexStack[currentStackIndex] = primeIndex;
			}
		}
	}

	vec3 color = vec3(0.0);

	for (uint i = 0; i < LIGHT_COLLECTION_COUNT; i++) {
		color += colors[i];
	}

	return color * (1.0 / float(LIGHT_COLLECTION_COUNT));
}


vec3 getClosestNeighboursColorByDistance(vec3 refPoint, vec3 normal) {
	vec3 color = vec3(0.0);

	int indexStack[LIGHT_COLLECTION_INDEX_STACK_SIZE];
	int currentStackIndex = 0;
	indexStack[0] = 0;

	for (int u = 0; u < count.c && currentStackIndex >= 0; u++) {
		int	currentIndex = indexStack[currentStackIndex];
		currentStackIndex--;
		KDData entry = kdData.d[currentIndex];

		vec3 diff = entry.pos - refPoint;
		diff += dot(normalize(diff), normal) * normal * DISTANCE_NORMAL_MULTIPLICATOR;
		float d = length(diff);
		if (d <= globalData.collectionDistance) {
			color += entry.color * (1.0 - (d / globalData.collectionDistance));
		}

		bool leftPrimeIndex = refPoint[entry.direction] < entry.pos[entry.direction];
		int primeIndex = leftPrimeIndex ? entry.leftIndex : entry.rightIndex;

		if (abs(refPoint[entry.direction] - entry.pos[entry.direction]) < globalData.collectionDistance) {
			int secondaryIndex = leftPrimeIndex ? entry.rightIndex : entry.leftIndex;

			if (secondaryIndex != -1) {
				if (currentIndex < LIGHT_COLLECTION_INDEX_STACK_SIZE) {
					currentStackIndex++;
					indexStack[currentStackIndex] = secondaryIndex;
				}
			}
		}

		if (primeIndex != -1) {
			if (currentIndex < LIGHT_COLLECTION_INDEX_STACK_SIZE) {
				currentStackIndex++;
				indexStack[currentStackIndex] = primeIndex;
			}
		}
	}

	return color;
}

void main() {
	vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec3 origin = (globalData.viewInverse * vec4(vec3(0), 1)).xyz;
	vec3 target = (globalData.projInverse * vec4(d.x, d.y, 1, 1)).xyz;
	vec3 direction = (globalData.viewInverse * vec4(normalize(target), 0)).xyz;

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xFF;
	float tmin = 0.001;
	float tmax = 10000.0;

	vec3 rayColor = vec3(1.0);
	vec3 outColor = vec3(0.0);

	for (int i = 0; i < globalData.visionJumpCount; i++) {
		traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin, tmin, direction, tmax, 0);

		if (rayPayload.miss) break;

		float rayHandlingValue = rand(origin + gl_LaunchIDEXT, i, 0);

		if (rayHandlingValue <= rayPayload.diffuseThreshold) {
			if (use_count_light_collecton) {
				outColor += rayColor * getClosestNeighboursColorByCount(rayPayload.pos, rayPayload.normal);
				break;
			} else {
				outColor += rayColor * getClosestNeighboursColorByDistance(rayPayload.pos, rayPayload.normal);
			}
			
			rayColor *= rayPayload.color;

			origin = rayPayload.pos;
			direction = randomNormalDirection(origin + gl_LaunchIDEXT, i, 1, rayPayload.normal);
		} else if (rayHandlingValue <= rayPayload.reflectThreshold) {
			origin = rayPayload.pos;
			direction = reflect(direction, rayPayload.normal);
		} else if (rayHandlingValue <= rayPayload.glossyThreshold) {
			
		} else if (rayHandlingValue <= rayPayload.transparentThreshold) {
			
		}
	}

	if (!rayPayload.miss) {
		float rayHandlingValue = rand(origin + gl_LaunchIDEXT, int(globalData.visionJumpCount), 0);

		if (rayHandlingValue <= rayPayload.diffuseThreshold) {
			if (use_count_light_collecton) {
				// outColor += rayColor * getClosestNeighboursColorByCount(rayPayload.pos, rayPayload.normal);
			} else {
				outColor += rayColor * getClosestNeighboursColorByDistance(rayPayload.pos, rayPayload.normal);
			}
		}
	}

	uvec3 intColor = uvec3(outColor * 255);
	imageAtomicAdd(rawImageRed, ivec2(gl_LaunchIDEXT.xy), intColor.x);
	imageAtomicAdd(rawImageGreen, ivec2(gl_LaunchIDEXT.xy), intColor.y);
	imageAtomicAdd(rawImageBlue, ivec2(gl_LaunchIDEXT.xy), intColor.z);
}
