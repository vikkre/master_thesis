#version 460


#include "path_tracer.glsl"


void main() {
	vec3 origin = renderSettings.lightPosition;
	// vec3 direction = randomNormal(gl_LaunchIDEXT, 0, 1);
	vec3 direction = sphericalFibonacci(float(gl_LaunchIDEXT.x), float(renderSettings.lightRayCount));

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xFF;
	float tmin = 0.001;
	float tmax = 10000.0;

	vec3 color = vec3(1.0);

	for (int i = 0; i < renderSettings.lightJumpCount; i++) {
		traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin, tmin, direction, tmax, 0);

		if (!rayPayload.hit) break;

		color *= rayPayload.color;

		float rayHandlingValue = rand(origin + gl_LaunchIDEXT, i, 0);

		if (rayHandlingValue <= rayPayload.diffuseThreshold) {
			uint index = atomicAdd(count.c, 1);
			pointData.d[index].pos = rayPayload.pos;
			pointData.d[index].color = color;

			origin = rayPayload.pos;
			direction = randomNormalDirection(origin + gl_LaunchIDEXT, i, 1, rayPayload.normal);
		} else if (rayHandlingValue <= rayPayload.reflectThreshold) {
			origin = rayPayload.pos;
			direction = reflect(direction, rayPayload.normal);
		} else if (rayHandlingValue <= rayPayload.transparentThreshold) {
			origin = rayPayload.pos;
			direction = customRefract(direction, rayPayload.normal, rayPayload.refractionIndex);
		}
	}
}
