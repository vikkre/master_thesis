#version 460


#include "path_tracer.glsl"


vec3 getClosestNeighboursColorByCount(vec3 refPoint, vec3 normal) {
	uint filled = 0;
	uint furthest = 0;
	vec3 colors[LIGHT_COLLECTION_DATA_ARRAY_SIZE];
	vec3 points[LIGHT_COLLECTION_DATA_ARRAY_SIZE];
	float distances[LIGHT_COLLECTION_DATA_ARRAY_SIZE];
	float rDistances[LIGHT_COLLECTION_DATA_ARRAY_SIZE];

	int indexStack[LIGHT_COLLECTION_INDEX_STACK_SIZE];
	int currentStackIndex = 0;
	indexStack[0] = 0;

	for (int u = 0; u < count.c && currentStackIndex >= 0; u++) {
		int	currentIndex = indexStack[currentStackIndex];
		currentStackIndex--;
		KDData entry = kdData.d[currentIndex];

		vec3 diff = entry.pos - refPoint;
		float rd = length(diff);
		diff += dot(normalize(diff), normal) * normal * renderSettings.collectionDistanceShrinkFactor;
		float d = length(diff);
		if (filled < renderSettings.lightCollectionCount) {
			colors[filled] = entry.color;
			points[filled] = entry.pos;
			distances[filled] = d;
			rDistances[filled] = rd;
			filled++;

			if (filled == renderSettings.lightCollectionCount) {
				uint furthestIndex = 0;
				for (uint i = 1; i < renderSettings.lightCollectionCount; i++) {
					if (distances[i] > distances[furthestIndex]) furthestIndex = i;
				}
				furthest = furthestIndex;
			}
		} else if (d < distances[furthest]) {
			colors[furthest] = entry.color;
			points[furthest] = entry.pos;
			distances[furthest] = d;
			rDistances[furthest] = rd;

			uint furthestIndex = 0;
			for (uint i = 1; i < renderSettings.lightCollectionCount; i++) {
				if (distances[i] > distances[furthestIndex]) furthestIndex = i;
			}
			furthest = furthestIndex;
		}

		bool leftPrimeIndex = refPoint[entry.direction] < entry.pos[entry.direction];
		int primeIndex = leftPrimeIndex ? entry.leftIndex : entry.rightIndex;

		if (filled < renderSettings.lightCollectionCount || abs(refPoint[entry.direction] - entry.pos[entry.direction]) < distances[furthest]) {
			int secondaryIndex = leftPrimeIndex ? entry.rightIndex : entry.leftIndex;

			if (secondaryIndex != -1) {
				if (currentIndex < LIGHT_COLLECTION_INDEX_STACK_SIZE) {
					currentStackIndex++;
					indexStack[currentStackIndex] = secondaryIndex;
				}
			}
		}

		if (primeIndex != -1) {
			if (currentIndex < LIGHT_COLLECTION_INDEX_STACK_SIZE) {
				currentStackIndex++;
				indexStack[currentStackIndex] = primeIndex;
			}
		}
	}

	vec3 color = vec3(0.0);

	for (uint i = 0; i < renderSettings.lightCollectionCount; i++) {
		if (rDistances[i] <= renderSettings.collectionDistance)
		color += colors[i] * (1.0 - (rDistances[i] / renderSettings.collectionDistance));
	}

	return color * (1.0 / float(renderSettings.lightCollectionCount));
}


vec3 getClosestNeighboursColorByDistance(vec3 refPoint, vec3 normal) {
	vec3 color = vec3(0.0);

	int indexStack[LIGHT_COLLECTION_INDEX_STACK_SIZE];
	int currentStackIndex = 0;
	indexStack[0] = 0;

	for (int u = 0; u < count.c && currentStackIndex >= 0; u++) {
		int	currentIndex = indexStack[currentStackIndex];
		currentStackIndex--;
		KDData entry = kdData.d[currentIndex];

		vec3 diff = entry.pos - refPoint;
		diff += dot(normalize(diff), normal) * normal * renderSettings.collectionDistanceShrinkFactor;
		float d = length(diff);
		if (d <= renderSettings.collectionDistance) {
			color += entry.color * (1.0 - (d / renderSettings.collectionDistance));
		}

		bool leftPrimeIndex = refPoint[entry.direction] < entry.pos[entry.direction];
		int primeIndex = leftPrimeIndex ? entry.leftIndex : entry.rightIndex;

		if (abs(refPoint[entry.direction] - entry.pos[entry.direction]) < renderSettings.collectionDistance) {
			int secondaryIndex = leftPrimeIndex ? entry.rightIndex : entry.leftIndex;

			if (secondaryIndex != -1) {
				if (currentIndex < LIGHT_COLLECTION_INDEX_STACK_SIZE) {
					currentStackIndex++;
					indexStack[currentStackIndex] = secondaryIndex;
				}
			}
		}

		if (primeIndex != -1) {
			if (currentIndex < LIGHT_COLLECTION_INDEX_STACK_SIZE) {
				currentStackIndex++;
				indexStack[currentStackIndex] = primeIndex;
			}
		}
	}

	return color;
}

void main() {
	RaySendInfo rayInfo = getVisionRay(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy);

	vec3 rayColor = vec3(1.0);
	vec3 outColor = vec3(0.0);

	for (int i = 0; i < renderSettings.visionJumpCount; i++) {
		traceRay(rayInfo);

		if (!rayPayload.hit) break;

		if (rayPayload.lightSource) {
			outColor = rayPayload.color;
			break;
		}

		uint traceValue = handleHit(rayInfo, i);

		if (traceValue == DIFFUSE_VALUE) {
			if (renderSettings.useCountLightCollecton == 1) {
				outColor += rayColor * getClosestNeighboursColorByCount(rayPayload.pos, rayPayload.normal);
			} else {
				outColor += rayColor * getClosestNeighboursColorByDistance(rayPayload.pos, rayPayload.normal);
			}
			
			rayColor *= rayPayload.color;
		}
	}

	uvec3 intColor = uvec3(outColor * 255);
	imageAtomicAdd(rawImageRed, ivec2(gl_LaunchIDEXT.xy), intColor.x);
	imageAtomicAdd(rawImageGreen, ivec2(gl_LaunchIDEXT.xy), intColor.y);
	imageAtomicAdd(rawImageBlue, ivec2(gl_LaunchIDEXT.xy), intColor.z);
}
