#version 460


#include "path_tracer.glsl"



void main() {
	if (gl_LaunchIDEXT.z > 0) return;
	RNG rng = initRNG(gl_LaunchIDEXT);

	RaySendInfo startRayInfo = getVisionRay(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy);

	vec3 finalColor = vec3(0.0);

	traceRay(startRayInfo);

	if (!rayPayload.hit) {
		finalColor = vec3(0.0);
	} else if (rayPayload.lightSource) {
		finalColor = rayPayload.color;
	} else {
		RayPayload defaultRayPayload = rayPayload;
		for (uint visionRayIndex = 0; visionRayIndex < renderSettings.visionRayPerPixelCount; ++visionRayIndex) {
			RaySendInfo rayInfo = startRayInfo;
			rayPayload = defaultRayPayload;
			vec3 color = vec3(1.0);
			bool lightHit = false;

			for (uint i = 1; i < renderSettings.visionJumpCount; ++i) {
				uint traceValue = handleHit(rayInfo, rng);

				if (traceValue == DIFFUSE_VALUE) {
					color *= rayPayload.color * dot(rayInfo.direction, rayPayload.normal);
				}

				traceRay(rayInfo);

				if (!rayPayload.hit) {
					color = vec3(0.0);
					break;
				}

				if (rayPayload.lightSource) {
					if (dot(rayInfo.direction, rayPayload.normal) <= 0.0) {
						color *= rayPayload.color;
						lightHit = true;
						break;
					}
				}
			}

			if (lightHit) finalColor += color;
		}

		finalColor *= (2*PI) / float(renderSettings.visionRayPerPixelCount);
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 0.0));
}
